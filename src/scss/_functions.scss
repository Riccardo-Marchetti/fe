/*=============================
    Functions
=============================*/

@mixin mediaQueryMax($media) {
  @media only screen and (max-width: $media) {
    @content;
  }
}

@mixin mediaQueryMin($media) {
  @media only screen and (min-width: $media) {
    @content;
  }
}

@mixin smallViewportHeight() {
  height: 100vh;
  height: 100dvh;
}

@mixin largeViewportHeight() {
  height: 100vh;
  height: 100lvh;
}

@mixin dynamicViewportHeight() {
  height: 100vh;
  height: 100svh;
}

@mixin smallViewportMinHeight() {
  height: 100vh;
  height: 100dvh;
}

@mixin largeViewportMinHeight() {
  height: 100vh;
  height: 100lvh;
}

@mixin dynamicViewportMinHeight() {
  height: 100vh;
  height: 100svh;
}

@mixin flexbox(
  $alignItems: flex-start,
  $justifyContent: flex-start,
  $wrap: nowrap
) {
  display: flex;
  align-items: $alignItems;
  justify-content: $justifyContent;
  flex-wrap: $wrap;
}

@mixin bgCover() {
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-size: cover;
}

@mixin centerBlock() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin centerAbsolute() {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

@mixin transition($prop: all, $dur: 0.3s, $timing: ease, $delay: 0s) {
  -webkit-transition: $prop $dur $timing $delay;
  -moz-transition: $prop $dur $timing $delay;
  -o-transition: $prop $dur $timing $delay;
  transition: $prop $dur $timing $delay;
}

@mixin hidden() {
  opacity: 0;
  backface-visibility: hidden;
  visibility: hidden;
}

@mixin visible() {
  opacity: 1;
  backface-visibility: visible;
  visibility: visible;
}

@mixin rgbaBg($color, $opacity) {
  background-color: $color;
  background-color: rgba($color, $opacity);
}
@mixin rgbaColor($color, $opacity) {
  color: $color;
  color: rgba($color, $opacity);
}

@mixin hover() {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}

@mixin visuallyhidden() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

@mixin noSelect() {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin dots() {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin aspectRatio($padding-bottom: 100%, $loader: false) {
  height: 0;
  overflow: hidden;
  padding-bottom: $padding-bottom;
  position: relative;

  > * {
    display: block;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 2;
  }

  @if ($loader == true) {
    &:before {
      animation: phAnimation 0.8s linear infinite;
      background: linear-gradient(
          45deg,
          hsla(0, 0%, 100%, 0) 40%,
          hsla(0, 0%, 100%, 0.75) 50%,
          hsla(0, 0%, 100%, 0) 54%
        )
        50%
        50%;
      bottom: 0;
      content: " ";
      left: 50%;
      margin-left: -250%;
      pointer-events: none;
      position: absolute;
      right: 0;
      top: 0;
      width: 500%;
      z-index: 1;
    }
  }
}

@keyframes phAnimation {
  0% {
    transform: translate3d(-30%, 0, 0);
  }

  to {
    transform: translate3d(30%, 0, 0);
  }
}

@mixin prop($prop: 100%) {
  background-color: var(--color-placeholder);
  height: 0;
  overflow: hidden;
  padding-bottom: $prop;
  position: relative;

  > * {
    display: block;
    height: 100%;
    left: 0;
    object-fit: cover;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 1;
  }
}
